Welcome back. And in this demo lesson, I just want to give you the opportunity to gain some practical experience of how S3 handles encryption. So what we're going to do is create an S3 bucket and into that bucket, we're going to put a number of objects and for each one we're going to utilize a different type of serverside encryption. So we'll be uploading one object with no encryption, one object using SSE- S3, so S3 managed encryption, and then one object using SSE- KMS. which will utilize KMS for key management. So once we've uploaded those objects, we'll experiment with some permissions changes just to see how each of these different encryption types work. So let's get started. Now the first thing you'll need to check is that you're logged in to the I am admin user of the general AWS account and you need to have the Northern Virginia region selected. Then let's move to S3. So click in the services dropdown, type S3 and then click to move to the S3. free console. Now, I want you to go ahead and click on create bucket and then just create a bucket called catpix and then put some random text on the end. You should use something different and something that's unique to you. Leave the region set as US East Northern Virginia. Scroll all the way down to the bottom and click on create bucket. Next, change across to the key management service console. That will either be in your history or you'll have to type it in the services dropdown. Once If you're here, go ahead and click on create key. Pick symmetric key. Make sure KMS is set in this dropdown. Click next. The alias we'll be using is catpix. So type catpix and click next. Don't select anything for define key administrative permissions. We'll not set any permissions on the key policy this time. So just click next. And then on this screen, define key usage permissions. Just click next again without selecting anything. So the key policy that's going to be created for this KMS key only trusts the account. So it only trusts the account root user of this specific AWS account and that's what we want. So go ahead and click on finish. Now at this point move back across to the S3 console, go into the catpix bucket that you just created and I want you to go ahead and download the file that's attached to this lesson and then extract that file. And inside the resultant folder are some objects that you're going to be uploading to this S3 bucket. So go ahead and do that and then click on upload add files. Then locate the folder that you've just extracted and go into it and you should see four images in there. Defaulty Merlin.jpeg no ink prissy.jpeg s- kms jinny.jpeg and sse- s3 dweeze.jpeg. So that's good. So the first one that we want to upload and we need to do these one by one because we're going to be configuring the description type to use. So the first one is no ink hyphen prissy. So select that and click on open. Expand properties and then scroll down to serverside encryption. And it's here where you can choose to either disable serverside encryption which is the default option or you can enable it and choose between two different types. Either Amazon S3 key which is SSE S3 or AWS key management service which is SSE KM. S. Now, for this part of the demo, we're going to leave this disabled. So, scroll all the way down to the bottom and click on upload. Wait for this upload process to complete and then click on close. Now, we're going to follow that same process again. So, click on upload again. Add files. This time, we'll select SSC S3 Dwee.jpeg. So, click on open. Expand properties and then scroll down to serverside encryption. Then, click Specify an encryption key. So, we're going to use S3 managed encryption. Then scroll all the way down to the bottom and click on upload. Wait for this upload process to complete and then click on close. Now, finally, click on upload once more. Click on add files. This time, SSE- KMS jinny. So, select that. Click on open. Expand properties and then scroll down to serverside encryption. Then, click specify. an encryption key and this time we're going to use SSE-KMS. So select that and then you can either use the AWS managed key. So this is the service default key. So AWS/S3 or you can choose your own KMS key to use for this object. And if you choose this option, you'll be able to click the AWS KMS key dropdown and pick the KMS key to use. What I'm going to do first is select this A WS managed key. So the default key for this service. Then scroll all the way down to the bottom and click on upload. Wait for this upload process to complete and then click on close. So that will encrypt the object using this default S3 AWS managed KMS key that's now inside KMS. I wanted to do that just to demonstrate how it automatically creates it. So now let's go ahead and re-upload this object. So click on upload, add files. Select sec kms jinny.jpeg and click on open. Scroll down. Expand properties. Scroll down again. For serverside encryption, select specify an encryption key. Pick AWS key management service key. So SSSE KMS. Select choose from your AWS KMS keys. Click in the dropown and then select catpix that we created earlier. Once you've done that, scroll all the way down to bottom. Click on upload. Wait for that process to complete and then click on close. Now, at this point, we've got three different objects in this bucket and we can open each of these because we're logged in as I am admin, which is an S3 administrator. So, I'm going to select the first one, click on open. So, that's Prrisy and Prissry isn't using any encryption. Next, I'll select DW. Click on open. DW is using SSC S3 encryption. Next, I'll select Jinny and Jinny is using KMS encryption. So SSE- KMS but again I'll be able to open that object as well because I am admin is a full administrator of the entire AWS account. So that includes S3 and all the services including KMS. Next, what we're going to do is apply a deny policy on the IM admin user which prevents us from using KMS. So we'll stay as being a full account administrator and a full S3 administrator, but we're going to block off the KMS service entirely. And I want to demonstrate exactly what that does to our ability to open these three objects. So, click on services and either open the IM console from the history or type it in the find services box and then click it. Once we're here, click on users, select your IM admin user, click on add inline policy, click on the JSON tab, and then delete the skeleton template that's in this box and then paste in the contents of the denykms.json file and this is contained in the folder you extracted from this lesson's download link and it's also attached to this lesson. This is what it should look like. The effect is to deny it denies any actions KMS colon star. So any KMS actions on all resources. So essentially this blocks off the entire K MS service for this user. So go ahead and click on review policy, call it deny KMS and click on create policy. And this now means that I am admin can no longer access KMS. So now if we just click on services and go back to the S3 console, go inside the catpix bucket and we've got the same three objects. Now we should still be able to open the no ink.prisy image because this isn't using any form of encryption because the IM admin user still has full admin permissions and full S3 permissions. We should have no problems opening up this image. And there we go. We've still got the prryy s3 object. Next, we'll look at the sS-3 dwee.jpeg object. If we click that and click on open, as with the no encryption, because this is encrypted using SSE- s3 and this is completely internal to the S3 product. We should have no problems opening this object because we have the permissions inside S3 to do anything in S3. But something different happens if we try to open the SSE KMS jinny object. Now just to explain what will occur when I click on this open link. S3 will then have to liaz with KMS and get KMS to decrypt the data encryption key that encrypts this object. So we need to retrieve the encrypted data encryption key for this object and request that KMS decrypts it. Now if that worked, we'd get back the plain text version of that key and we would use it to decrypt this object and it would open up in a tab without any issues because we've got full rights over S3. We have permission to do almost all of that process. But what we don't have permission to do is to actually get KMS to decrypt this encrypted data encryption key. don't have that permission because we just added a deny policy to the I am admin user and as we know by now deny allow deny deny always wins an explicit deny always overrules everything else. So when I click on open and S3 retrieves this encrypted data encryption key and gives it to KMS and says please decrypt this and give me the plain text back KMS is going to refuse. And what we see when we do that is we get and access denied. So now we've implemented this RO separation. So even though we have full S3 admin rights. So if I went back to this bucket and I clicked on the SSE KMS Ginny file and deleted it, I would be able to delete that object because I have full control over S3. But I can't open it because I've prevented us accessing KMS. And that's how we implement RO separation. So SSE KMS is definitely the encryption type that you want to use if you've got these really extensive regulations or any security requirements around key control. So let's go ahead and just remove that restriction. So just go back to the IM console. I just want to do this before we forget and have problems later in the course. Click on users, click on IM admin, and then just click on the cross next to this deny KMS inline policy and that will remove it from our user and that will allow us to access KMS again. We can verify that by clicking on services, either selecting key management service in the history or typing it. Moving to the KMS console, and we can bring up this list, which proves that we've got some access to KMS again. So that's good. Now, if we just go ahead and click on the AWS managed keys option on the left here, this is where you'll be able to see this default encryption key that's used when you upload an object using SSC KMS encryption. But don't pick a particular key. So, This is now the default. Now, if we open this, because it's an AWS managed key, we don't have the ability to set any key rotation. We can see the key policy here, but we can't make any changes to it. This is set by AWS when it creates it, so that it only allows accesses from S3. So, this is a fixed key policy, but we can't control anything about this key. Now, contrast that with the customer managed keys that we've got. And if we go into catpix, this is a key that we created. Now we can edit the key policy. We could switch to policy view and make changes. And we've got the ability to control the key rotation. So if you face any exam questions where you need to fully manage the keys that are used as part of the S3 encryption process, then you've got to use SSE- KMS. Now, if we just return to the S3 console, there's just one more thing that I want to demonstrate. Go into the catpix bucket again. Click on properties, locate default encryption, and then click Click on edit and this is where you get the option to specify the default encryption to use for this bucket. Now again, this isn't a restriction. This does not prevent anyone uploading objects to the bucket using a different type of encryption. All it does is specify what the default is if the upload itself does not specify an encryption method. So we could select Amazon S3 key, which is SSE- S3. And you might also see this referred to elsewhere as 8 ES 256. It's also known by that name. But we could also select the AWS key management service key known as SSSE KMS. And this is where we can either choose to use the default key or pick a customer managed key that we want to use as the default for the bucket. So let's just demonstrate that. Go ahead and select the catpix key to use for this bucket. Then scroll down and click on save changes. And that will set the defaults for the bucket. And we can demonstrate that. Let's go ahead and click on the objects tab. And we're going to upload a new object to this bucket. So click on upload, add files. Then go ahead and select the default hyphen Merlin object and click open. Scroll down. Click on upload. And even though we didn't pick a particular encryption method for this object, it's going to use the default settings that we picked for the bucket. And now we can see that the default hyphen Merlin.jpeg object has has been uploaded. So if we open up default- Merlin, we can see it's using SSE- KMS as the serverside encryption type and it's using the default service key that we set in the default encryption settings on the bucket. Okay, well that's everything I wanted to cover in this demo lesson. So let's just tidy up to make sure that we don't experience any charges. Go back to the Amazon S3 console, select the bucket that you created, and then click on empty. You'll need to confirm to empty that bucket. Once that process is completed and the bucket's emptied and then follow that same process, but this time click on delete to delete the bucket from your AWS account. Next, click services, click on key management service, and we'll just mark the key that we created for deletion. So, select customer managed keys, select catpix, click on key actions, schedule key deletion, set this to seven, which is the minimum. Check the box. and click on schedule deletion. And at this point, that's everything that I wanted to cover in this lesson. So, I've demonstrated how when you upload an object using no encryption, then you can always access it, assuming that you have S3 permissions. When you upload an object using SSE- S3 or AES 256, then again, you can always access it assuming you have S3 permissions. If you upload an object using SSE- KMS as well as S three permissions, you also need permissions on at least the KMS key that was used for that encryption. And if you don't have that, you get a permission denied error. So when you're utilizing SSE- KMS, you need both the KMS permissions and the S3 permissions, which allows you to do that role separation and split it so that you can have S3 administrators who can't access the data and people who can access the data but can't manage the objects. That's role separation. And for a lot of businesses, That's really important if they compartmentalize their permissions. And then lastly, I demonstrated the default bucket encryption options. And remember, for the exam, it is not a limit. It does not fix the encryption. It merely sets it for any objects that don't specify an explicit type of encryption. If you upload an object to a bucket which has a default and you pick a different type of encryption, that's absolutely fine. With that being said though, that's everything. everything I wanted to cover in this demonstration. I hope it's been fun and useful. Go ahead, mark this video as complete and when you're ready, I'll see you in the next.

