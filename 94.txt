Welcome back and in this lesson I want to talk about S3 life cycle configuration. Now you can create life cycle rules on S3 buckets which can automatically transition or expire objects in the bucket. They're a great way to optimize the costs for larger S3 buckets and so they're an important skill to have as a solutions architect, developer or operational engineer. Let's jump in and explore exactly what features like life cycle configuration adds to S3 buckets. A life cycle configuration at its foundation is a set of rules which you apply to a bucket. These rules consist of actions which apply based on criteria. So do X if Y is true. These rules can apply to a whole bucket or they can apply to groups of objects in that bucket defined by prefix or tags. The actions which are applied are one of two types. Transition actions which change the storage class of whichever object or objects are affected. So an example of this is that you could transition objects from S3 standard to say S3 infrequent access after 30 days. And you do this if you're sure that the objects will be more infrequently accessed after that initial 30-day period. You could then maybe transition the objects from infrequent access to S3 Glacia deep archive after after 90 days when you're certain that they will be rarely if ever accessed after that point. Now the other type of rule are expiration actions which can delete whatever object or objects or object versions are affected. So you might want to expire objects or versions entirely after a certain time period and this can be useful to keep buckets tidy. Now both of these can work on versions as well if you have a version enabled bucket. But this can become complex and so it's something that you need to carefully plan before implementing. Life cycle configurations offer a way to automate the deletion of objects or object versions or change the storage class of objects to optimize costs over time. An important thing to understand is that these rules aren't based on access. So you can't move objects between classes based on how frequently they're accessed. This is something which a different feature intelligent taring does on your half. Now you can combine these S3 life cycle actions to manage an object's complete life cycle. For example, suppose that objects you create have a well-defined life cycle. Initially, the objects are frequently accessed over a period of 30 days. Then objects are infrequently accessed for up to 90 days and after that the objects are no longer required. In this scenario, you can create an S3 life cycle rule in which you specify the initial transition action. to S3 intelligent taring, S3 standard IIA, or even S3 onezone IIA storage. Then you might have another transition action through to one of the Glacia storage classes for archiving. And then potentially even an expiration action when you're sure you no longer require the object. As you move the objects from one storage class to another, you save on the storage costs. Now, let's look visually at the life cycle process. So with life cycle configuration, and specifically the transitions between different storage classes. You can think of this as a waterfall. So we start with all of the storage classes. So we've got standard infrequent access, intelligent tearing, onezone infrequent access, glacia instant retrieval, glacia flexible retrieval, and then glacia deep archive. And it's important to understand that this transition process like a waterfall flows down. So Glacia flexible retrieval can transition into Glacia deep archive. Glacia instant retrieval can transition into glacia flexible and glacia deep archive. One's own infrequent access can transition into glacia flexible or glacia deep archive. Importantly, not into glacia instant retrieval. This is one of the exceptions that you need to be aware of. Intelligent tearing. This one can transition into one zone infrequent access. Glacia Instant, Glacia flexible, and Glacia deep archive. Then we've got standard infrequent access, which can transition into more classes still. So, intelligent taring, one zone infrequent access, glacia instant, glacia flexible, and glacia deep archive. And then finally, we've got S3 standard. And this can transition into all of the other classes. So transitioning flows down like a waterfall, but generally won't go directly. Most of the life cycle configuration that I've been exposed to operates with multiple different stages as the access patterns of objects change over time. If you do have any use cases though, you can go directly between most of the different classes. Whichever storage classes you do make use of, transition can't happen in an upward direction, only down. And then finally, there are some restrictions or considerations that you need to be aware of. Firstly, be careful when transitioning smaller objects from standard through to infrequent access, intelligent tearing or one zone infrequent access. And this is because of the minimums on those classes. For larger collections of smaller objects, you can end up with equal or more costs because of the minimums of these different storage classes. Additionally, and this is important to understand for the exam, there's a 30-day minimum per period where an object needs to remain on S3 standard before then moving into infrequent access or one zone infrequent access. So you can store objects when you upload them directly into standard IIA and one zone IIA and that's okay. But if you first store that object into S3 standard and then you want to transition that into standard IIA or one zone IIA, then that object needs to have been in S3 standard for 30 days before you can life cycle transition that into either of those infrequent access tiers. That's really important to understand. You can always directly adjust the storage class of an object from the CLI or console UI, but when you're using life cycle configuration, an object needs to be an S3 standard for 30 days before it can be transitioned into standard infrequent access or one zone infrequent access. And then finally, and this one is a little bit more obscure still, if you want To create a single rule which transitions objects from standard through to infrequent access or one zone infrequent access, you have to wait an additional 30 days before then transitioning those objects through to any of the glacia classes. You can't have a single rule which moves something from S3 standard through to the infrequent access classes and then sooner than 30 days moves those same objects through to the glacia classes with with a single rule, the object has to be within standard infrequent access or one zone infrequent access for 30 days before that same rule can then move those objects through to any of the glacia classes. You can have two rules which do that process without that 30-day gap. But but a single rule there has to be a 30-day period where the object is in the infrequent access tiers before moving into the glacia tiers. Now, depending on the course that you're watching, there might be a demo coming up elsewhere in the course where you'll use life cycle rules. If this doesn't apply for the course that you're on, don't be alarmed if there isn't a demo. In any case, though, that's all I wanted to cover in this theory lesson. So, go ahead and complete the video, and when you're ready, we can move on to the next.

