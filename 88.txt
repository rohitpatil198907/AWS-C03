Welcome back. And in this demo lesson, I just wanted to give you a bit of practical exposure to KMS. And in this demo, we're going to continue using the scenario that we've got the cat ruler trying to send encrypted battle plans to the robot general. Now, to get started, just make sure that you're logged in to the I am admin user of the general AWS account, so the management account of the organization. As always, you'll need to have the Northern Virginia region selected. And once you do, go ahead and move across to the KMS console. So click in the search box at the top, type KMS and then open that in a new tab and then click on create key because we'll be creating a KMS key. Now KMS allows the creation of symmetric or asymmetric keys. And just to keep this demonstration simple, we're going to demonstrate using a symmetric key. So make sure this option is selected. And then just to demonstrate some advanced options, just expand this. And this is where you can set the key material. origin. If you recall from the previous lesson, I talked about how the physical backing key material could either be generated by KMS or imported. And this is where you select between those two options. Now, I'm not going to talk about the custom key store at this point in the course. I'll talk about this in more detail later on in the course when I talk about cloud HSM, which is a different product entirely. For now, just select KMS, and this will make KMS generate this physical backing key material. that we'll be using to do our cryptographic operations. Now, historically, KMS was a single region service, which means that keys created in the product could never leave the region that they were created in. More recently, KMS has extended this functionality, allowing you to create multi- region keys. Now, for the purpose of this demo lesson, we're only going to be using a single region key, which is the default. So, make sure that single region key is selected. and then we can continue. So go ahead and click on next. Now in the previous lesson I mentioned how a key has a unique ID but also that we could create an alias which references a key and that's what we can do here. So I'm going to go ahead and create an alias and I'm going to call the alias cat robot all one word. So type in cat robot and click next. Now I discussed earlier how a KMS key has a key policy and a key policy is a resource policy that applies to the key. Now it's here where we can specify the key administrators for a particular key. There is a difference between identities that can manage a key and identities that can use a key for cryptographic operations like encrypt or decrypt. It's this point where we define who can manage this key. So go ahead and just check the box next to IM admin. So that will make sure that our I am admin user can administer this key. Once you've done that, scroll down. There's a box here that allows admin administrators also to delete this key and that's the default. So we'll leave that as is and click next. Now the previous step is where we defined who had admin permissions on the key. This stage lets us define who can use the key for cryptographic operations. So encrypt and decrypt. To keep things simple, we're going to define it here, which adds the relevant entries to the key policy. So just check the box next to I am admin, which is the user that we're logged in as, and then just scroll down. We could also, if we wanted, to add other AWS accounts here so that they had permission to use this key. But for this demonstration, we don't need to do that. So just click on next. And this is the key policy that this wizard has created. So if I just scroll down, it assigns the account level trust at the top. So that the account itself, the account root user is allowed to perform any KMS colon actions on this key. So that is the part of the policy this statement here, which means that this key will trust this account. It's this statement that defines contains the key administrators so that I am admin inside this account can create and describe and enable and list and all of the other admin style permissions. If I scroll down further still, it's this statement that allows I am admin to perform encryption and decryption and re-encrypt and generate data key and describe key actions against this key. So all of the permissions that we've defined are inside the key policy. So at this point, go ahead and click on finish and that will create the key as well as the alias that we'll use to reference this key. If we go into this key, I'll just show you some of the options that are available. We'll be able to obviously edit the key policy and we can define key rotation. So, by default, key rotation for a customer managed key is switched off and we can enable it to rotate the key once every year. For an AWS managed key, that is by default turned on and you can't switch it off and it also performs the rotation approximately once every year. So if I just click on AWS manage keys as we go through the course and start turning on encryption for various different services you'll notice how each service the first time it uses encryption with KMS it creates an AWS managed key in this list. Now that's everything we need to do on the AWS side. Now we can start using this key to perform some cryptographic operations. So let's do that. Now at this point rather than using the local command line interface on your local machine. We're going to be using CloudShell and this allows us to use the same set of instructions regardless of your local operating system. So to launch CloudShell, click on this icon and this will take a few minutes, but it will put you at a shell that's using your currently loggedin user in order to gain permissions. So any commands you run in the shell will be run as your currently loggedin user. So the first thing that we'll be doing to create a plain text battle plan. So this is the message that the cat ruler is going to be sending to the robot general. And to generate that file, we'll use echo and then a space and then a speech mark and then a small message. And the message is going to be find all the doggos and then a comma distract them with the yums. So find all the doggos, distract them with the yums and then a speech mark to close that off. And then we'll redirect that to a file called battleplans.txt and then press enter. Now, the commands to interact with KMS from the command line are fairly long. So, what I'll do is paste it in and then I'll step through it line by line and explain exactly what it's doing. So, first we need to encrypt the plain text battle plans and we want the result to be a cipher text document, something that we can pass to the robot general which can't be intercepted on route and can be decrypted at the other end. So, this is the command that we need to run. And I just want to step through this line by line. The top part should be fairly obvious. So we're running the AWS command line tools, the KMS module, and using the encrypt action. So this specifies that we want to encrypt a piece of data. This line specifies the alias that we want to use to encrypt this piece of data. You can either specify the key ID, which uniquely identifies a key, or you can specify an alias using the alias forward slash and then the name of the alias. In this case, I've elected to do that. So, this is using the alias that we created in the first part of this demo lesson. This line is where we're providing the plain text to KMS. And instead of typing the plain text on the command line, we're telling it to consult this file. So, battle plans.txt. Now, the next line is telling the command line tools to output the result as text. And it's going to be a text output with a number of different fields. The next line double-phen query is telling the command line tools to select one particular field and that's the field cipher text blob. And it's this field that contains the cipher text output from the KMS command. Now the output of any of these commands that interact with KMS is going to be a base 64 encoded file. So it's not going to be binary data. It's going to be base 64 encoded. What we want to do is have our output being a binary encrypted file. And so we need to take the result of this encryption command and pass it to a utility called base 64. And that utility using this command line option will decode that base 64 and place the result into a not_ battleplans.nc file. And this is going to be our resultant cipher text. Now I know that command is relatively complex. KMS is not the easiest part. part of AWS to use from the command line, but I did want to step you through line by line so you didn't know what each line achieved. Okay, so let's go ahead and run this command. To do that, we need to click on paste and then once that's pasted into cloud shell, press enter to run the command. And the output not_ battle plans will be our encrypted cipher text. So if I run a cat not battle plans, we get binary encrypted data. So obviously anyone looking from the outside will just see scrambled data and won't understand what the message is. So now I'm going to clear the screen to make it a little bit easier to see. And this is the encrypted cipher text file that we could transfer across to the robot general. So now I want you to assume in this scenario that we're now the robot general and we're looking to decrypt this file. Okay. So now I'm going to paste the next command for this lesson which is the decrypt command. And I'll be stepping through line by line just explaining exactly what each line accomplish. ES. So this is the command that's used to decrypt this cipher text and give us the original plain text battle plans. So first this top line should be logical. We're running the AWS command line tools with the KMS module and the decrypt command. We're passing in some cipher text. So we use the command line option double-en ciphertext blob. And instead of pasting this on the command line, we're giving it this file. So not_ battleplans.nc. We're again asking for the output to be in text. This will output some text with a number of different fields. We're using the query field to query for the plain text field. And again, the output will be base 64 encoded. And so we're using the base 64 utility with the double hyphen decode to decode that back into its original form and store that into a file called decrypted plans.txt. So let's go ahead and run this. So click paste and then Press enter to run this command. This will decrypt the cipher text and it will output decrypted plans.txt. And if we cat that document, we'll see the original message. Find all the doggos, distract them with the yums. And that's just been a really simple demonstration of using the KMS encrypt command and the KMS decrypt command. A couple of things that I want to draw your attention to throughout the process. With the encrypt command, we needed to pass pass in the key to use as well as the plain text and we got out the cipher text. With the decrypt command, we don't need to specify the key. We only give the cipher text. And assuming we have permissions on the KMS key so that we can use it to perform decrypt operations, then we'll get the decrypted plain text. And that's what's happened here. Now, just to clear up from this lesson, if you go back to the AWS console, make sure you're in US East1, so Northern Virginia, and go back to the key management service console and we're just going to delete the KMS key that we created earlier in this lesson. So click on customer managed keys. Select the KMS key that we created earlier. In my case, cat robot. Then click on key actions and schedule key deletion. You need to enter a waiting period between 7 and 30 days. Since you want this cleared up as fast as possible, go and enter seven. Tick the box to confirm and then schedule delete. And that'll put the key into a pending deletion state. And after 7 days, it'll be entirely removed. And at that point, we've cleared up all of the assets that we've used in this demo lesson. So go ahead and complete the video. And when you're ready, join me in the next.